"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var bezier_1 = require("../../lib/bezier");
var point_1 = require("../../lib/point");
var throttle_1 = require("../../lib/throttle");
var ctx = null;
var isTouching = false;
var _isEmpty = false;
var minDistance = 5;
var backgroundColor = '#4f736d';
var pen = { color: '#333333', width: 1, _maxWidth: 10 };
var dpr = 1;
var _maxWidth = 2.5;
var _minWidth = 0.5;
var _dotSize = (_minWidth + _maxWidth) / 2;
var _lastPoints = [];
var velocityFilterWeight = 0.7;
var _lastVelocity = 0;
var _lastWidth = (_minWidth + _maxWidth) / 2;
var _strokeMoveUpdate = null;
var timeLine = [];
Page({
    data: {},
    onLoad: function (options) {
        console.log('onLoad');
    },
    onReady: function () {
        this.initContext();
        _strokeMoveUpdate = throttle_1.throttle(this._strokeUpdate, 16);
    },
    onShow: function () {
    },
    onHide: function () {
    },
    onUnload: function () {
    },
    initContext: function () {
        var _a = wx.getSystemInfoSync(), pixelRatio = _a.pixelRatio, windowWidth = _a.windowWidth, windowHeight = _a.windowHeight;
        dpr = pixelRatio;
        console.log('pixelRatio', pixelRatio);
        var query = wx.createSelectorQuery();
        query.select('#canvas').node().exec(function (res) {
            var canvas = res[0].node;
            console.log('canvas --- ', canvas);
            canvas.width = windowWidth;
            canvas.height = windowHeight;
            ctx = canvas.getContext('2d');
            console.log('ctx', ctx);
            ctx.fillStyle = backgroundColor;
            ctx.fillRect(16, 16, ctx.canvas.width - 32, ctx.canvas.height - 32);
        });
    },
    onTouchStart: function (event) {
        console.log('touch start -- ', event);
        isTouching = true;
        this._strokeBegin(event);
    },
    onTouchMove: function (event) {
        this._strokeUpdate(event);
    },
    onTouchEnd: function (event) {
        console.log('touch end --', event);
        isTouching = false;
        this._strokeEnd(event);
    },
    onTouchCancel: function (event) {
        console.log('touch cancel', event);
        isTouching = false;
        this._strokeEnd(event);
    },
    onError: function (event) {
        console.log('canvas error', event);
        isTouching = false;
        this._strokeEnd(event);
    },
    _strokeBegin: function (event) {
        var newPointGroup = {
            color: pen.color,
            points: [],
        };
        timeLine.push(newPointGroup);
        this._reset();
        this._strokeUpdate(event);
    },
    _strokeUpdate: function (event) {
        if (timeLine.length === 0) {
            this._strokeBegin(event);
            return;
        }
        var _a = event.touches[0], x = _a.x, y = _a.y;
        console.log('timeLine', timeLine);
        var point = this._createPoint(x, y);
        var lastPointGroup = timeLine[timeLine.length - 1];
        var lastPoints = lastPointGroup.points;
        var lastPoint = lastPoints.length > 0 && lastPoints[lastPoints.length - 1];
        var isLastPointTooClose = lastPoint ? point.distanceTo(lastPoint) <= minDistance : false;
        pen.color = lastPointGroup.color;
        console.log('lastPoint', lastPoint);
        console.log('isLastPointTooClose', isLastPointTooClose);
        if (!lastPoint || !(lastPoint && isLastPointTooClose)) {
            var curve = this._addPoint(point);
            if (!curve) {
                this._drawDot(point);
            }
            else if (curve) {
                this._drawCurve(curve);
            }
        }
    },
    _strokeEnd: function (event) {
        console.log('end +++++++ ', event);
    },
    _calculateCurveWidths: function (startPoint, endPoint) {
        var velocity = velocityFilterWeight * endPoint.velocityFrom(startPoint) + (1 - velocityFilterWeight) * _lastVelocity;
        var newWidth = this._strokeWidth(velocity);
        var widths = {
            start: _lastWidth,
            end: newWidth,
        };
        _lastVelocity = velocity;
        _lastWidth = newWidth;
        return widths;
    },
    _strokeWidth: function (velocity) {
        return Math.max(_maxWidth / (velocity + 1), _minWidth);
    },
    _createPoint: function (x, y) {
        var left = 0;
        var top = 0;
        return new point_1.Point(x - left, y - top, new Date().getTime());
    },
    _addPoint: function (point) {
        _lastPoints.push(point);
        if (_lastPoints.length > 2) {
            if (_lastPoints.length === 3) {
                _lastPoints.unshift(_lastPoints[0]);
            }
            var widths = this._calculateCurveWidths(_lastPoints[1], _lastPoints[2]);
            var curve = bezier_1.Bezier.fromPoints(_lastPoints, widths);
            _lastPoints.shift();
            return curve;
        }
        return null;
    },
    _drawDot: function (point) {
        ctx.beginPath();
        var width = _dotSize;
        this._drawCurveSegment(point.x, point.y, width);
        ctx.closePath();
        ctx.fillStyle = pen.color;
        ctx.fill();
    },
    _drawCurveSegment: function (x, y, width) {
        ctx.moveTo(x, y);
        ctx.arc(x, y, width, 0, 2 * Math.PI, false);
        _isEmpty = false;
    },
    _drawCurve: function (curve) {
        console.log('_drawCurve ---- ', curve);
        var widthDelta = curve.endWidth - curve.startWidth;
        var drawSteps = Math.floor(curve.length()) * 2;
        ctx.beginPath();
        ctx.fillStyle = pen.color;
        for (var i = 0; i < drawSteps; i += 1) {
            var t = i / drawSteps;
            var tt = t * t;
            var ttt = tt * t;
            var u = 1 - t;
            var uu = u * u;
            var uuu = uu * u;
            var x = uuu * curve.startPoint.x;
            x += 3 * uu * t * curve.control1.x;
            x += 3 * u * tt * curve.control2.x;
            x += ttt * curve.endPoint.x;
            var y = uuu * curve.startPoint.y;
            y += 3 * uu * t * curve.control1.y;
            y += 3 * u * tt * curve.control2.y;
            y += ttt * curve.endPoint.y;
            var width = Math.min(curve.startWidth + ttt * widthDelta, pen._maxWidth);
            this._drawCurveSegment(x, y, width);
        }
        ctx.closePath();
        ctx.fill();
    },
    _lineTo: function (x, y) {
        ctx.lineTo(x * dpr, y * dpr);
    },
    _moveTo: function (x, y) {
        ctx.moveTo(x * dpr, y * dpr);
    },
    _reset: function () {
        _lastPoints = [];
        _lastVelocity = 0;
        _lastWidth = (_minWidth + _maxWidth) / 2;
        ctx.fillStyle = pen.color;
    },
    _clear: function () {
        ctx.fillStyle = backgroundColor;
        ctx.clearRect(16, 16, ctx.canvas.width - 32, ctx.canvas.height - 32);
        ctx.fillRect(16, 16, ctx.canvas.width - 32, ctx.canvas.height - 32);
        timeLine = [];
        this._reset();
        _isEmpty = true;
    },
});
//# sourceMappingURL=data:application/json;base64,