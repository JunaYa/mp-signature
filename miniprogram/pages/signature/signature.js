"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var point_1 = require("../../lib/point");
var ctx = null;
var isTouching = false;
var backgroundColor = '#FEFEFE';
var pen = { color: '#333333', width: 1 };
var dpi = 1;
var timeLine = [];
Page({
    data: {},
    onLoad: function (options) {
        console.log('onLoad');
    },
    onReady: function () {
        this.initContext();
    },
    onShow: function () {
    },
    onHide: function () {
    },
    onUnload: function () {
    },
    initContext: function () {
        var _a = wx.getSystemInfoSync(), pixelRatio = _a.pixelRatio, windowWidth = _a.windowWidth, windowHeight = _a.windowHeight;
        dpi = pixelRatio;
        console.log('pixelRatio', pixelRatio);
        var query = wx.createSelectorQuery();
        query.select('#canvas').node().exec(function (res) {
            var canvas = res[0].node;
            console.log('canvas --- ', canvas);
            canvas.width = windowWidth;
            canvas.height = windowHeight;
            ctx = canvas.getContext('2d');
            console.log('ctx', ctx);
            ctx.fillStyle = backgroundColor;
            ctx.fillRect(16, 16, ctx.canvas.width - 32, ctx.canvas.height - 32);
        });
    },
    onTouchStart: function (event) {
        console.log('touch start -- ', event);
        isTouching = true;
        this._strokeBegin(event);
    },
    onTouchMove: function (event) {
        console.log('touch move --', event);
        var _a = event.touches[0], x = _a.x, y = _a.y;
        ctx.lineTo(x * dpi, y * dpi);
        ctx.stroke();
    },
    onTouchEnd: function (event) {
        console.log('touch end --', event);
        isTouching = false;
        ctx.closePath();
    },
    onTouchCancel: function (event) {
        console.log('touch cancel', event);
        isTouching = false;
    },
    onError: function (event) {
        console.log('canvas error', event);
        isTouching = false;
    },
    _strokeBegin: function (event) {
        var newPointGroup = {
            color: pen.color,
            points: [],
        };
        timeLine.push(newPointGroup);
        this._reset();
        this._strokeUpdate(event);
    },
    _strokeUpdate: function (event) {
        if (timeLine.length === 0) {
            this._strokeUpdate(event);
            return;
        }
        var _a = event.touches[0], x = _a.x, y = _a.y;
        ctx.lineTo(x, y);
    },
    _strokeEnd: function (event) {
    },
    _createPoint: function (x, y) {
        var _a = ctx.canvas, left = _a.left, top = _a.top;
        return new point_1.Point(x - left, y - top, new Date().getTime());
    },
    _drawDot: function () {
        ctx.beginPath();
        ctx.closePath();
        ctx.fillStyle = '#333333';
        ctx.fill();
    },
    _reset: function () {
        ctx.fillStyle = pen.color;
    },
    _clear: function () {
        ctx.fillStyle = backgroundColor;
        ctx.clearRect(16, 16, ctx.canvas.width - 32, ctx.canvas.height - 32);
        ctx.fillRect(16, 16, ctx.canvas.width - 32, ctx.canvas.height - 32);
        timeLine = [];
        this._reset();
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2lnbmF0dXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic2lnbmF0dXJlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBRUEseUNBQW1EO0FBS25ELElBQUksR0FBRyxHQUFRLElBQUksQ0FBQTtBQUVuQixJQUFJLFVBQVUsR0FBWSxLQUFLLENBQUE7QUFDL0IsSUFBSSxlQUFlLEdBQUcsU0FBUyxDQUFBO0FBQy9CLElBQUksR0FBRyxHQUFHLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLENBQUE7QUFDeEMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFBO0FBR1gsSUFBSSxRQUFRLEdBQUcsRUFBRSxDQUFBO0FBRWpCLElBQUksQ0FBQztJQUtILElBQUksRUFBRSxFQUVMO0lBS0QsTUFBTSxFQUFFLFVBQVUsT0FBTztRQUN2QixPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFBO0lBQ3ZCLENBQUM7SUFLRCxPQUFPLEVBQUU7UUFDUCxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUE7SUFDcEIsQ0FBQztJQUtELE1BQU0sRUFBRTtJQUVSLENBQUM7SUFLRCxNQUFNLEVBQUU7SUFFUixDQUFDO0lBS0QsUUFBUSxFQUFFO0lBRVYsQ0FBQztJQUtELFdBQVc7UUFDSCxJQUFBLDJCQUFrRSxFQUFoRSwwQkFBVSxFQUFFLDRCQUFXLEVBQUUsOEJBQXVDLENBQUE7UUFDeEUsR0FBRyxHQUFHLFVBQVUsQ0FBQTtRQUNoQixPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxVQUFVLENBQUMsQ0FBQTtRQUVyQyxJQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsbUJBQW1CLEVBQUUsQ0FBQTtRQUN0QyxLQUFLLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFDLEdBQUc7WUFDdEMsSUFBTSxNQUFNLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQTtZQUMxQixPQUFPLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRSxNQUFNLENBQUMsQ0FBQTtZQUdsQyxNQUFNLENBQUMsS0FBSyxHQUFHLFdBQVcsQ0FBQTtZQUMxQixNQUFNLENBQUMsTUFBTSxHQUFHLFlBQVksQ0FBQTtZQUU1QixHQUFHLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQTtZQUU3QixPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQTtZQUV2QixHQUFHLENBQUMsU0FBUyxHQUFHLGVBQWUsQ0FBQTtZQUMvQixHQUFHLENBQUMsUUFBUSxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEdBQUcsRUFBRSxFQUFFLEdBQUcsQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQyxDQUFBO1FBQ3JFLENBQUMsQ0FBQyxDQUFBO0lBQ0osQ0FBQztJQUVELFlBQVksRUFBWixVQUFjLEtBQVU7UUFDdEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsRUFBRSxLQUFLLENBQUMsQ0FBQTtRQUNyQyxVQUFVLEdBQUcsSUFBSSxDQUFBO1FBQ2pCLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUE7SUFDMUIsQ0FBQztJQUVELFdBQVcsRUFBWCxVQUFhLEtBQVU7UUFDckIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxlQUFlLEVBQUUsS0FBSyxDQUFDLENBQUE7UUFDN0IsSUFBQSxxQkFBeUIsRUFBeEIsUUFBQyxFQUFFLFFBQXFCLENBQUE7UUFFL0IsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQTtRQUM1QixHQUFHLENBQUMsTUFBTSxFQUFFLENBQUE7SUFDZCxDQUFDO0lBRUQsVUFBVSxFQUFWLFVBQVksS0FBVTtRQUNwQixPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWMsRUFBRSxLQUFLLENBQUMsQ0FBQTtRQUNsQyxVQUFVLEdBQUcsS0FBSyxDQUFBO1FBQ2xCLEdBQUcsQ0FBQyxTQUFTLEVBQUUsQ0FBQTtJQUNqQixDQUFDO0lBRUQsYUFBYSxFQUFiLFVBQWUsS0FBVTtRQUN2QixPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWMsRUFBRSxLQUFLLENBQUMsQ0FBQTtRQUNsQyxVQUFVLEdBQUcsS0FBSyxDQUFBO0lBQ3BCLENBQUM7SUFFRCxPQUFPLFlBQUUsS0FBVTtRQUNqQixPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWMsRUFBRSxLQUFLLENBQUMsQ0FBQTtRQUNsQyxVQUFVLEdBQUcsS0FBSyxDQUFBO0lBQ3BCLENBQUM7SUFFRCxZQUFZLEVBQVosVUFBYyxLQUFXO1FBQ3ZCLElBQU0sYUFBYSxHQUFHO1lBQ3BCLEtBQUssRUFBRSxHQUFHLENBQUMsS0FBSztZQUNoQixNQUFNLEVBQUUsRUFBRTtTQUNYLENBQUM7UUFFRixRQUFRLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQzdCLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUNkLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDNUIsQ0FBQztJQUVELGFBQWEsRUFBYixVQUFlLEtBQVU7UUFDdkIsSUFBSSxRQUFRLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUN6QixJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFBO1lBQ3pCLE9BQU07U0FDUDtRQUVLLElBQUEscUJBQXlCLEVBQXhCLFFBQUMsRUFBRSxRQUFxQixDQUFBO1FBQy9CLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO0lBQ2xCLENBQUM7SUFFRCxVQUFVLEVBQVYsVUFBWSxLQUFVO0lBRXRCLENBQUM7SUFFRCxZQUFZLEVBQVosVUFBYSxDQUFTLEVBQUUsQ0FBUztRQUN6QixJQUFBLGVBQXdCLEVBQXZCLGNBQUksRUFBRSxZQUFpQixDQUFDO1FBQy9CLE9BQU8sSUFBSSxhQUFLLENBQUMsQ0FBQyxHQUFHLElBQUksRUFBRSxDQUFDLEdBQUcsR0FBRyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztJQUM1RCxDQUFDO0lBRUQsUUFBUSxFQUFSO1FBQ0UsR0FBRyxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBRWhCLEdBQUcsQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUNoQixHQUFHLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztRQUMxQixHQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDYixDQUFDO0lBRUQsTUFBTSxFQUFOO1FBSUUsR0FBRyxDQUFDLFNBQVMsR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFBO0lBQzNCLENBQUM7SUFFRCxNQUFNLEVBQU47UUFDRSxHQUFHLENBQUMsU0FBUyxHQUFHLGVBQWUsQ0FBQztRQUNoQyxHQUFHLENBQUMsU0FBUyxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEdBQUcsRUFBRSxFQUFFLEdBQUcsQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQyxDQUFBO1FBQ3BFLEdBQUcsQ0FBQyxRQUFRLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFHLENBQUMsTUFBTSxDQUFDLEtBQUssR0FBRyxFQUFFLEVBQUUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDLENBQUE7UUFDbkUsUUFBUSxHQUFHLEVBQUUsQ0FBQTtRQUNiLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQTtJQUNmLENBQUM7Q0FFRixDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBtaW5pcHJvZ3JhbS9wYWdlcy9zaWduYXR1cmUuanNcbmltcG9ydCB7IEJlemllciB9IGZyb20gJy4uLy4uL2xpYi9iZXppZXInXG5pbXBvcnQgeyBCYXNpY1BvaW50LCBQb2ludCB9IGZyb20gJy4uLy4uL2xpYi9wb2ludCdcbmltcG9ydCB7IHRocm90dGxlIH0gZnJvbSAnLi4vLi4vbGliL3Rocm90dGxlJ1xuXG5cbi8vIGNhbnZhcyBjb250ZXh0XG5sZXQgY3R4OiBhbnkgPSBudWxsXG4vLyB0b3VjaCBkcmF3aW5nXG5sZXQgaXNUb3VjaGluZzogYm9vbGVhbiA9IGZhbHNlXG5sZXQgYmFja2dyb3VuZENvbG9yID0gJyNGRUZFRkUnXG5sZXQgcGVuID0geyBjb2xvcjogJyMzMzMzMzMnLCB3aWR0aDogMSB9XG5sZXQgZHBpID0gMVxuXG4vLyDml7bpl7TovbTvvIzorrDlvZXmk43kvZzmraXpqqTmlbDmja5cbmxldCB0aW1lTGluZSA9IFtdXG5cblBhZ2Uoe1xuXG4gIC8qKlxuICAgKiBQYWdlIGluaXRpYWwgZGF0YVxuICAgKi9cbiAgZGF0YToge1xuXG4gIH0sXG5cbiAgLyoqXG4gICAqIExpZmVjeWNsZSBmdW5jdGlvbi0tQ2FsbGVkIHdoZW4gcGFnZSBsb2FkXG4gICAqL1xuICBvbkxvYWQ6IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgY29uc29sZS5sb2coJ29uTG9hZCcpXG4gIH0sXG5cbiAgLyoqXG4gICAqIExpZmVjeWNsZSBmdW5jdGlvbi0tQ2FsbGVkIHdoZW4gcGFnZSBpcyBpbml0aWFsbHkgcmVuZGVyZWRcbiAgICovXG4gIG9uUmVhZHk6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmluaXRDb250ZXh0KClcbiAgfSxcblxuICAvKipcbiAgICogTGlmZWN5Y2xlIGZ1bmN0aW9uLS1DYWxsZWQgd2hlbiBwYWdlIHNob3dcbiAgICovXG4gIG9uU2hvdzogZnVuY3Rpb24gKCkge1xuXG4gIH0sXG5cbiAgLyoqXG4gICAqIExpZmVjeWNsZSBmdW5jdGlvbi0tQ2FsbGVkIHdoZW4gcGFnZSBoaWRlXG4gICAqL1xuICBvbkhpZGU6IGZ1bmN0aW9uICgpIHtcblxuICB9LFxuXG4gIC8qKlxuICAgKiBMaWZlY3ljbGUgZnVuY3Rpb24tLUNhbGxlZCB3aGVuIHBhZ2UgdW5sb2FkXG4gICAqL1xuICBvblVubG9hZDogZnVuY3Rpb24gKCkge1xuXG4gIH0sXG5cbiAgLyoqXG4gICAqIGluaXQgY2FudmFzIGNvbnRleHRcbiAgICovXG4gIGluaXRDb250ZXh0ICgpIHtcbiAgICBjb25zdCB7IHBpeGVsUmF0aW8sIHdpbmRvd1dpZHRoLCB3aW5kb3dIZWlnaHQgfSA9IHd4LmdldFN5c3RlbUluZm9TeW5jKClcbiAgICBkcGkgPSBwaXhlbFJhdGlvXG4gICAgY29uc29sZS5sb2coJ3BpeGVsUmF0aW8nLCBwaXhlbFJhdGlvKVxuXG4gICAgY29uc3QgcXVlcnkgPSB3eC5jcmVhdGVTZWxlY3RvclF1ZXJ5KClcbiAgICBxdWVyeS5zZWxlY3QoJyNjYW52YXMnKS5ub2RlKCkuZXhlYygocmVzKSA9PiB7XG4gICAgICBjb25zdCBjYW52YXMgPSByZXNbMF0ubm9kZVxuICAgICAgY29uc29sZS5sb2coJ2NhbnZhcyAtLS0gJywgY2FudmFzKVxuICAgICAgLy8gY2FudmFzLndpZHRoID0gd2luZG93V2lkdGggKiBkcGlcbiAgICAgIC8vIGNhbnZhcy5oZWlnaHQgPSB3aW5kb3dIZWlnaHQgKiBkcGlcbiAgICAgIGNhbnZhcy53aWR0aCA9IHdpbmRvd1dpZHRoXG4gICAgICBjYW52YXMuaGVpZ2h0ID0gd2luZG93SGVpZ2h0XG5cbiAgICAgIGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpXG4gICAgICAvLyBjdHguc2NhbGUocGl4ZWxSYXRpbywgcGl4ZWxSYXRpbylcbiAgICAgIGNvbnNvbGUubG9nKCdjdHgnLCBjdHgpXG5cbiAgICAgIGN0eC5maWxsU3R5bGUgPSBiYWNrZ3JvdW5kQ29sb3JcbiAgICAgIGN0eC5maWxsUmVjdCgxNiwgMTYsIGN0eC5jYW52YXMud2lkdGggLSAzMiwgY3R4LmNhbnZhcy5oZWlnaHQgLSAzMilcbiAgICB9KVxuICB9LFxuXG4gIG9uVG91Y2hTdGFydCAoZXZlbnQ6IGFueSkgOiB2b2lkIHtcbiAgICBjb25zb2xlLmxvZygndG91Y2ggc3RhcnQgLS0gJywgZXZlbnQpXG4gICAgaXNUb3VjaGluZyA9IHRydWVcbiAgICB0aGlzLl9zdHJva2VCZWdpbihldmVudClcbiAgfSxcblxuICBvblRvdWNoTW92ZSAoZXZlbnQ6IGFueSkgOiB2b2lkIHtcbiAgICBjb25zb2xlLmxvZygndG91Y2ggbW92ZSAtLScsIGV2ZW50KVxuICAgIGNvbnN0IHt4LCB5fSA9IGV2ZW50LnRvdWNoZXNbMF1cbiAgICAvLyBjdHguYmVnaW5QYXRoKClcbiAgICBjdHgubGluZVRvKHggKiBkcGksIHkgKiBkcGkpXG4gICAgY3R4LnN0cm9rZSgpXG4gIH0sXG5cbiAgb25Ub3VjaEVuZCAoZXZlbnQ6IGFueSkgOiB2b2lkIHtcbiAgICBjb25zb2xlLmxvZygndG91Y2ggZW5kIC0tJywgZXZlbnQpXG4gICAgaXNUb3VjaGluZyA9IGZhbHNlXG4gICAgY3R4LmNsb3NlUGF0aCgpXG4gIH0sXG5cbiAgb25Ub3VjaENhbmNlbCAoZXZlbnQ6IGFueSkgOiB2b2lkIHtcbiAgICBjb25zb2xlLmxvZygndG91Y2ggY2FuY2VsJywgZXZlbnQpXG4gICAgaXNUb3VjaGluZyA9IGZhbHNlXG4gIH0sXG5cbiAgb25FcnJvciAoZXZlbnQ6IGFueSkge1xuICAgIGNvbnNvbGUubG9nKCdjYW52YXMgZXJyb3InLCBldmVudClcbiAgICBpc1RvdWNoaW5nID0gZmFsc2VcbiAgfSxcblxuICBfc3Ryb2tlQmVnaW4gKGV2ZW50PzogYW55KSA6IHZvaWQge1xuICAgIGNvbnN0IG5ld1BvaW50R3JvdXAgPSB7XG4gICAgICBjb2xvcjogcGVuLmNvbG9yLFxuICAgICAgcG9pbnRzOiBbXSxcbiAgICB9O1xuXG4gICAgdGltZUxpbmUucHVzaChuZXdQb2ludEdyb3VwKTtcbiAgICB0aGlzLl9yZXNldCgpO1xuICAgIHRoaXMuX3N0cm9rZVVwZGF0ZShldmVudCk7XG4gIH0sXG5cbiAgX3N0cm9rZVVwZGF0ZSAoZXZlbnQ6IGFueSkgOiB2b2lkIHtcbiAgICBpZiAodGltZUxpbmUubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aGlzLl9zdHJva2VVcGRhdGUoZXZlbnQpXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjb25zdCB7eCwgeX0gPSBldmVudC50b3VjaGVzWzBdXG4gICAgY3R4LmxpbmVUbyh4LCB5KVxuICB9LFxuXG4gIF9zdHJva2VFbmQgKGV2ZW50OiBhbnkpIDogdm9pZCB7XG5cbiAgfSxcblxuICBfY3JlYXRlUG9pbnQoeDogbnVtYmVyLCB5OiBudW1iZXIpOiBQb2ludCB7XG4gICAgY29uc3Qge2xlZnQsIHRvcH0gPSBjdHguY2FudmFzO1xuICAgIHJldHVybiBuZXcgUG9pbnQoeCAtIGxlZnQsIHkgLSB0b3AsIG5ldyBEYXRlKCkuZ2V0VGltZSgpKTtcbiAgfSxcblxuICBfZHJhd0RvdCAoKSA6IHZvaWQge1xuICAgIGN0eC5iZWdpblBhdGgoKTtcblxuICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICBjdHguZmlsbFN0eWxlID0gJyMzMzMzMzMnO1xuICAgIGN0eC5maWxsKCk7XG4gIH0sXG5cbiAgX3Jlc2V0ICgpIDogdm9pZCB7XG4gICAgLy8gdGhpcy5fbGFzdFBvaW50cyA9IFtdXG4gICAgLy8gdGhpcy5fbGFzdFZlbG9jaXR5ID0gMFxuICAgIC8vIHRoaXMuX2xhc3RXaWR0aCA9ICh0aGlzLm1pbldpZHRoICsgdGhpcy5tYXhXaWR0aCkgLyAyXG4gICAgY3R4LmZpbGxTdHlsZSA9IHBlbi5jb2xvclxuICB9LFxuXG4gIF9jbGVhciAoKSA6IHZvaWQge1xuICAgIGN0eC5maWxsU3R5bGUgPSBiYWNrZ3JvdW5kQ29sb3I7XG4gICAgY3R4LmNsZWFyUmVjdCgxNiwgMTYsIGN0eC5jYW52YXMud2lkdGggLSAzMiwgY3R4LmNhbnZhcy5oZWlnaHQgLSAzMilcbiAgICBjdHguZmlsbFJlY3QoMTYsIDE2LCBjdHguY2FudmFzLndpZHRoIC0gMzIsIGN0eC5jYW52YXMuaGVpZ2h0IC0gMzIpXG4gICAgdGltZUxpbmUgPSBbXVxuICAgIHRoaXMuX3Jlc2V0KClcbiAgfSxcblxufSkiXX0=