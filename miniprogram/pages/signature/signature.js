"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var point_1 = require("../../lib/point");
var ctx = null;
var isTouching = false;
var backgroundColor = '#FEFEFE';
var pen = { color: '#333333', width: 1 };
var dpr = 1;
var timeLine = [];
Page({
    data: {},
    onLoad: function (options) {
        console.log('onLoad');
    },
    onReady: function () {
        this.initContext();
    },
    onShow: function () {
    },
    onHide: function () {
    },
    onUnload: function () {
    },
    initContext: function () {
        var _a = wx.getSystemInfoSync(), pixelRatio = _a.pixelRatio, windowWidth = _a.windowWidth, windowHeight = _a.windowHeight;
        dpr = pixelRatio;
        console.log('pixelRatio', pixelRatio);
        var query = wx.createSelectorQuery();
        query.select('#canvas').node().exec(function (res) {
            var canvas = res[0].node;
            console.log('canvas --- ', canvas);
            canvas.width = windowWidth * dpr;
            canvas.height = windowHeight * dpr;
            ctx = canvas.getContext('2d');
            console.log('ctx', ctx);
            ctx.fillStyle = backgroundColor;
            ctx.fillRect(16, 16, ctx.canvas.width - 32, ctx.canvas.height - 32);
        });
    },
    onTouchStart: function (event) {
        console.log('touch start -- ', event);
        isTouching = true;
        this._strokeBegin(event);
    },
    onTouchMove: function (event) {
        console.log('touch move --', event);
        this._strokeUpdate(event);
    },
    onTouchEnd: function (event) {
        console.log('touch end --', event);
        isTouching = false;
        this._strokeEnd(event);
    },
    onTouchCancel: function (event) {
        console.log('touch cancel', event);
        isTouching = false;
        this._strokeEnd(event);
    },
    onError: function (event) {
        console.log('canvas error', event);
        isTouching = false;
        this._strokeEnd(event);
    },
    _strokeBegin: function (event) {
        var newPointGroup = {
            color: pen.color,
            points: [],
        };
        this._reset();
        timeLine.push(newPointGroup);
        var _a = event.touches[0], x = _a.x, y = _a.y;
        ctx.beginPath();
        this._moveTo(x, y);
        this._lineTo(x, y);
        this._strokeUpdate(event);
    },
    _strokeUpdate: function (event) {
        var _a = event.touches[0], x = _a.x, y = _a.y;
        this._lineTo(x, y);
        ctx.stroke();
    },
    _strokeEnd: function (event) {
        ctx.closePath();
    },
    _createPoint: function (x, y) {
        var _a = ctx.canvas, left = _a.left, top = _a.top;
        return new point_1.Point(x - left, y - top, new Date().getTime());
    },
    _drawDot: function () {
        ctx.beginPath();
        ctx.closePath();
        ctx.fillStyle = '#333333';
        ctx.fill();
    },
    _lineTo: function (x, y) {
        ctx.lineTo(x * dpr, y * dpr);
    },
    _moveTo: function (x, y) {
        ctx.moveTo(x * dpr, y * dpr);
    },
    _reset: function () {
        ctx.fillStyle = pen.color;
    },
    _clear: function () {
        ctx.fillStyle = backgroundColor;
        ctx.clearRect(16, 16, ctx.canvas.width - 32, ctx.canvas.height - 32);
        ctx.fillRect(16, 16, ctx.canvas.width - 32, ctx.canvas.height - 32);
        timeLine = [];
        this._reset();
    },
});
//# sourceMappingURL=data:application/json;base64,